22. Generate Parentheses
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

// Daniel's code
//這題考了 DFS 還有 recursion
class Solution {
    public List<String> generateParenthesis(int n) {
      List<String> res = new ArrayList<>();
      helper("", res, n, n);
      return res;
    }
    
    public void helper(String prefix, List<String> res, int left, int right){
      if(left == 0 && right == 0){
        res.add(prefix);
        return;
      }
      if(left > right) return;
        
      if(left > 0){
        helper(prefix + '(', res, left - 1, right);
        //recursive完，會到下一個
      }
      if(right > 0){
        helper(prefix + ')', res, left, right - 1);
      }
    }
}

// Joe's code
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        int left = 0;
        int right = 0;
        StringBuilder sb = new StringBuilder();
        helper(result, n, left, right, sb);
        return result;
    }

    private void helper(List<String> result, int n, int left, int right, StringBuilder sb) {
    //整个返回的情况
        if (left == n && right == n) {
            result.add(sb.toString());
            return;
        }
    //如果left小于括号数
        if (left < n) {
            sb.append("(");
            helper(result, n, left + 1, right, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
    //如果left大于right
        if (left > right) {
            sb.append(")");
            helper(result, n, left, right + 1, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
