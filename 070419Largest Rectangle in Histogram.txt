122. Largest Rectangle in Histogram
中文English
Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.

Example
Example 1:

Input：[2,1,5,6,2,3]
Output：10
Explanation：
The third and fourth rectangular truncated rectangle has an area of 2*5=10.
Example 2:

Input：[1,1]
Output：2
Explanation：
The first and second rectangular truncated rectangle has an area of 2*1=2.

//Daniel
public class Solution {
    /**
     * @param height: A list of integer
     * @return: The area of largest rectangle in the histogram
     */
    //将所有的可能的组合都求解一遍，比较之后保留最大的那一个就好了
    public int largestRectangleArea(int[] height) {
	int max = 0;
    	for (int i = 0; i < heights.length; i++) {
        int min = heights[i];
        for (int j = i; j >= 0; j--) {
            if (heights[j] < min) {
                min = heights[j];
            }
            max = Math.max(max, min * (i-j+1));
        }
    }
    return max;
    }
}

//Joel
public class Solution {
    /**
     * @param height: A list of integer
     * @return: The area of largest rectangle in the histogram
     */
    //用stack来维持一个从小到大递增的栈，来储存height【】的index
    public int largestRectangleArea(int[] height) {
       Stack<Integer> stack = new Stack<>();
	   int maxArea = 0;
	   int curt = 0;
	   for (int i = 0; i <= height.length; i++) {
	      curt = i == height.length ? -1 : height[i];
	      //for and while都会向前进，所以时间复杂度是O（n）
		  while (!stack.isEmpty() && curt < height[stack.peek()]) {
		      int temp = stack.pop();
			  int h = height[temp];
			  int w = stack.isEmpty() ? i : i - stack.peek() - 1;
			  maxArea = Math.max(maxArea, h * w);
		  }
		  stack.push(i);
	   }
	   return maxArea;
    }
}
