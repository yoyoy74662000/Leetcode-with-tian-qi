363. Trapping Rain Water
??English
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Trapping Rain Water

Example
Example 1:

Input: [0,1,0]
Output: 0
Example 2:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Challenge
O(n) time and O(1) memory

O(n) time and O(n) memory is also acceptable.

// Daniel's code
public class Solution {
    /**
     * @param heights: a list of integers
     * @return: a integer
     */
    //這是在考智力測驗吧
    public int trapRainWater(int[] heights) {
        if (heights == null || heights.length == 0) {
            return 0;
        }
        int left = 0;
        int right = heights.length - 1;
        int leftMax = 0;
        int rightMax = 0;
        int res = 0;
        while (left < right) {
            if (leftMax < rightMax) {
	    	leftMax = Math.max(leftMax, heights[left]);
                res += leftMax - heights(left);
                left++;
            } else {
	    	rightMax = Math.max(rightMax, heights[right]);
                res += rightMax - heights(right);
                right--;
            }
        }
        return res;
    }
}

//Joel
public class Solution {
    /**
     * @param heights: a list of integers
     * @return: a integer
     */
    public int trapRainWater(int[] heights) {
        if (heights == null || heights.length == 0) {
		    return 0;
		}
		
		
		//用一个maxHeightLelt记录到i为止，左边最高点
		int[] maxHeightLeft = new int[heights.length + 1];
	    maxHeightLeft[0] = 0;
		
		for (int i = 0; i < heights.length; i++) {
		    maxHeightLeft[i + 1] = Math.max(maxHeightLeft[i], heights[i]);
		}
		
		int area = 0;
		
		//记录右边最高点
		int maxHeightRight = 0;
		
		for (int i = heights.length - 1; i >= 0; i--) {
		//如果左右边最低点的高度大于height【i】代表有水在里面
			int temp = Math.min(maxHeightRight, maxHeightLeft[i]) - heights[i];
			area = area + (temp > 0 ? temp : 0);
			maxHeightRight = Math.max(maxHeightRight, heights[i]);
		}
		
		return area;
    }
}
